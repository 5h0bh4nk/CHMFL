        -:    0:Source:SIMENS_REPOSITORY/print_tokens2/print_tokens2_mutants/v3/print_tokens2.c
        -:    0:Graph:SIMENS_REPOSITORY/print_tokens2/print_tokens2_mutants/v3/print_tokens2.gcno
        -:    0:Data:SIMENS_REPOSITORY/print_tokens2/print_tokens2_mutants/v3/print_tokens2.gcda
        -:    0:Runs:1
        -:    1:/***********************************************/
        -:    2:/*  assgnment.5  Shu Z. A00042813 for CS453    */
        -:    3:/*  using the tokenizer and stream module      */
        -:    4:/*  print_tokens.c Code                        */
        -:    5:/***********************************************/
        -:    6:
        -:    7:/***********************************************/
        -:    8:/* NAME:	print_tokens                   */
        -:    9:/* INPUT:	a filename                     */
        -:   10:/* OUTPUT:      print out the token stream     */
        -:   11:/* DESCRIPTION: using the tokenizer interface  */
        -:   12:/*              to print out the token stream  */
        -:   13:/***********************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <ctype.h>
        -:   16:#include <string.h>
        -:   17:#include "tokens.h"
        -:   18:#define TRUE 1
        -:   19:#define FALSE 0
        -:   20:
        1:   21:main(argc,argv)
        -:   22:int argc;
        -:   23:char *argv[3];
        -:   24:{  char *fname;
        -:   25:   token tok;
        -:   26:   token_stream tp;
        1:   27:     if(argc==1)                  /* if not given filename,take as '""' */
        -:   28:       {
        1:   29:        fname= (char *) malloc(sizeof(char));
        1:   30:        *fname = '\0';
        -:   31:       }
    #####:   32:     else if(argc==2)
    #####:   33:        fname= argv[1];
        -:   34:     else
    #####:   35:       { fprintf(stdout, "Error!,please give the token stream\n");
    #####:   36:         exit(0);
        -:   37:       }
        1:   38:    tp=open_token_stream(fname);  /* open token stream */
        1:   39:    tok=get_token(tp);
        7:   40:    while (is_eof_token(tok) ==FALSE) /* take one token each time until eof */
        -:   41:    {
        6:   42:       print_token(tok);
        6:   43:       tok=get_token(tp);
        -:   44:    }
        1:   45:    print_token(tok); /* print eof signal */
        1:   46:    exit(0);
        -:   47:}
        -:   48:
        -:   49:/* stream.c code */
        -:   50:
        -:   51:/***********************************************/
        -:   52:/* NMAE:	open_character_stream          */
        -:   53:/* INPUT:       a filename                     */
        -:   54:/* OUTPUT:      a pointer to chacracter_stream */
        -:   55:/* DESCRIPTION: when not given a filename,     */
        -:   56:/*              open stdin,otherwise open      */
        -:   57:/*              the existed file               */
        -:   58:/***********************************************/
        1:   59:character_stream open_character_stream(fname)
        -:   60:char *fname;
        -:   61:{ character_stream fp;
        1:   62:  if(fname == NULL)
        1:   63:     fp=stdin;
    #####:   64:  else if ((fp=fopen(fname,"r"))== NULL)
        -:   65:  {
    #####:   66:       fprintf(stdout, "The file %s doesn't exists\n",fname);
    #####:   67:       exit(0);
        -:   68:  }
        1:   69:  return(fp);
        -:   70:}
        -:   71:
        -:   72:/**********************************************/
        -:   73:/* NAME:	get_char                      */
        -:   74:/* INPUT:       a pointer to char_stream      */
        -:   75:/* OUTPUT:      a character                   */
        -:   76:/**********************************************/
       83:   77:char get_char(fp)
        -:   78:character_stream fp;
        -:   79:{ char ch;
       83:   80:  ch=getc(fp);
       83:   81:  return(ch);
        -:   82:}
        -:   83:
        -:   84:/***************************************************/
        -:   85:/* NAME:      unget_char                           */
        -:   86:/* INPUT:     a pointer to char_stream,a character */
        -:   87:/* OUTPUT:    a character                          */
        -:   88:/* DESCRIPTION:when unable to put back,return EOF  */
        -:   89:/***************************************************/
        2:   90:char unget_char(ch,fp)
        -:   91:character_stream fp;
        -:   92:char ch;
        -:   93:{ char c;
        2:   94:  c=ungetc(ch,fp);
        2:   95:  if(c ==EOF)
        -:   96:    {
    #####:   97:     return(c);
        -:   98:    }
        -:   99:  else
        2:  100:     return(c);
        -:  101:}
        -:  102:
        -:  103:/* tokenizer.c code */
        -:  104:
        -:  105:
        -:  106:char buffer[81];  /* fixed array length MONI */ /* to store the token temporar */
        -:  107:
        -:  108:
        -:  109:static int is_spec_symbol();
        -:  110:static int is_token_end();
        -:  111:static unget_error();
        -:  112:static int is_keyword();
        -:  113:static int is_identifier();
        -:  114:static int is_num_constant();
        -:  115:static int is_char_constant();
        -:  116:static int is_str_constant();
        -:  117:static int is_comment();
        -:  118:static void print_spec_symbol();
        -:  119:
        -:  120:/********************************************************/
        -:  121:/* NAME:	open_token_stream                       */
        -:  122:/* INPUT:       a filename                              */
        -:  123:/* OUTPUT:      a pointer to a token_stream             */
        -:  124:/* DESCRIPTION: when filename is EMPTY,choice standard  */
        -:  125:/*              input device as input source            */
        -:  126:/********************************************************/
        1:  127:token_stream open_token_stream(fname)
        -:  128:char *fname;
        -:  129:{
        -:  130: token_stream fp;
        1:  131: if(strcmp(fname,"")==0)
        1:  132:    fp=open_character_stream(NULL);
        -:  133: else
    #####:  134:    fp=open_character_stream(fname);
        1:  135: return(fp);
        -:  136:}
        -:  137:
        -:  138:/********************************************************/
        -:  139:/* NAME :	get_token                               */
        -:  140:/* INPUT: 	a pointer to the tokens_stream          */
        -:  141:/* OUTPUT:      a token                                 */
        -:  142:/* DESCRIPTION: according the syntax of tokens,dealing  */
        -:  143:/*              with different case  and get one token  */
        -:  144:/********************************************************/
        7:  145:token get_token(tp)
        -:  146:token_stream tp;
        -:  147:{ 
        7:  148:  int i=0,j;
        7:  149:  int id=0;
        -:  150:  char ch,ch1[2];
      574:  151:  for (j=0;j<=80;j++)          /* initial the buffer   */
      567:  152:      { buffer[j]='\0';} 
        7:  153:   ch1[0]='\0';
        7:  154:   ch1[1]='\0';
        7:  155:   ch=get_char(tp);
        7:  156:   while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
        -:  157:      {
    #####:  158:       ch=get_char(tp);
        -:  159:      } 
        7:  160:   buffer[i]=ch;
        7:  161:   if(is_eof_token(buffer)==TRUE)return(buffer);
        6:  162:   if(is_spec_symbol(buffer)==TRUE)return(buffer); 
        5:  163:   if(ch =='"')id=1;    /* prepare for string */
        5:  164:   if(ch ==59)id=2;    /* prepare for comment */
        5:  165:   ch=get_char(tp);
        -:  166:
       76:  167:   while (is_token_end(id,ch) == FALSE)/* until meet the end character */
        -:  168:   {
       71:  169:       i++;
       71:  170:       buffer[i]=ch;
       71:  171:       ch=get_char(tp);
        -:  172:   }
        5:  173:   ch1[0]=ch;                        /* hold the end charcater          */
        5:  174:   if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
    #####:  175:      { ch=unget_char(ch,tp);        /* then put back eof on token_stream */
    #####:  176:        if(ch==EOF)unget_error(tp);
        -:  177:      }
        5:  178:   if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
        1:  179:      { ch=unget_char(ch,tp);        /* then put back this character       */
       1*:  180:        if(ch==EOF)unget_error(tp);
        1:  181:        return(buffer);
        -:  182:      }
        4:  183:   if(id==1)                  /* if end character is " and is string */
        1:  184:     { i++;                     /* case,hold the second " in buffer    */
        1:  185:       buffer[i]=ch;
        1:  186:       return(buffer); 
        -:  187:     }
        3:  188:   if(id==0 && ch==59)
        -:  189:                                   /* when not in string or comment,meet ";" */
        1:  190:     { ch=unget_char(ch,tp);       /* then put back this character         */
       1*:  191:       if(ch==EOF)unget_error(tp);
        1:  192:       return(buffer); 
        -:  193:     }
        2:  194:  return(buffer);                   /* return nomal case token             */
        -:  195:}
        -:  196:
        -:  197:/*******************************************************/
        -:  198:/* NAME:	is_token_end                           */
        -:  199:/* INPUT:       a character,a token status             */
        -:  200:/* OUTPUT:	a BOOLEAN value                        */
        -:  201:/*******************************************************/
       76:  202:static int is_token_end(str_com_id,ch)
        -:  203:char ch;
        -:  204:int str_com_id;
        -:  205:{ char ch1[2];  /* fixed array declaration MONI */
       76:  206: ch1[0]=ch;
       76:  207: ch1[1]='\0';
      76*:  208: if(is_eof_token(ch1)==TRUE)return(TRUE); /* is eof token? */
       76:  209: if(str_com_id==1)          /* is string token */
        2:  210:    { if(ch=='"' | ch=='\n')   /* for string until meet another " */
        1:  211:         return(TRUE);
        -:  212:      else
        1:  213:         return(FALSE);
        -:  214:    }
        -:  215:
       74:  216: if(str_com_id==2)    /* is comment token */
       60:  217:   { if(ch=='\n')     /* for comment until meet end of line */
        1:  218:        return(TRUE);
        -:  219:      else
       59:  220:        return(FALSE);
        -:  221:   }
        -:  222:
       14:  223: if(is_spec_symbol(ch1)==TRUE) return(TRUE); /* is special_symbol? */
       13:  224: if(ch ==' ' || ch=='\n' || ch==59) return(TRUE); 
        -:  225:                              /* others until meet blank or tab or 59 */
       11:  226: return(FALSE);               /* other case,return FALSE */
        -:  227:}
        -:  228:
        -:  229:/****************************************************/
        -:  230:/* NAME :	token_type                          */
        -:  231:/* INPUT:       a pointer to the token              */
        -:  232:/* OUTPUT:      an integer value                    */
        -:  233:/* DESCRIPTION: the integer value is corresponding  */
        -:  234:/*              to the different token type         */
        -:  235:/****************************************************/
        7:  236:static int token_type(tok)
        -:  237:token tok;
        -:  238:{ 
       7*:  239: if(is_keyword(tok))return(keyword);
        7:  240: if(is_spec_symbol(tok))return(spec_symbol);
        6:  241: if(is_identifier(tok))return(identifier);
       4*:  242: if(is_num_constant(tok))return(num_constant);
        4:  243: if(is_str_constant(tok))return(str_constant);
        3:  244: if(is_char_constant(tok))return(char_constant);
        2:  245: if(is_comment(tok))return(comment);
        1:  246: if(is_eof_token(tok))return(end);
    #####:  247: return(error);                    /* else look as error token */
        -:  248:}
        -:  249:
        -:  250:/****************************************************/
        -:  251:/* NAME:	print_token                         */
        -:  252:/* INPUT:	a pointer to the token              */
        -:  253:/* OUTPUT:      a BOOLEAN value,print out the token */
        -:  254:/*              according the forms required        */
        -:  255:/****************************************************/
        7:  256:int print_token(tok)
        -:  257:token tok;
        -:  258:{ int type;
        7:  259:  type=token_type(tok);
        7:  260: if(type==error)
    #####:  261:   { fprintf(stdout, "error,\"%s\".\n",tok);
        -:  262:   } 
        7:  263: if(type==keyword)
    #####:  264:   {fprintf(stdout, "keyword,\"%s\".\n",tok);
        -:  265:   }
        7:  266: if(type==spec_symbol)print_spec_symbol(tok);
        7:  267: if(type==identifier)
        2:  268:   {fprintf(stdout, "identifier,\"%s\".\n",tok);
        -:  269:   }
        7:  270: if(type==num_constant)
    #####:  271:   {fprintf(stdout, "numeric,%s.\n",tok);
        -:  272:   }
        7:  273: if(type==str_constant)
        1:  274:   {fprintf(stdout, "string,%s.\n",tok);
        -:  275:   }
        7:  276: if(type==char_constant)
        1:  277:   {tok=tok+1;
        1:  278:    fprintf(stdout, "character,\"%s\".\n",tok);
        -:  279:   }
        7:  280: if(type==end) 
        1:  281:   fprintf(stdout, "eof.\n");
        7:  282:   }
        -:  283:
        -:  284:/* the code for tokens judgment function */
        -:  285:
        -:  286:/*************************************/
        -:  287:/* NAME:	is_eof_token         */
        -:  288:/* INPUT: 	a pointer to a token */
        -:  289:/* OUTPUT:      a BOOLEAN value      */
        -:  290:/*************************************/
       96:  291:int is_eof_token(tok)
        -:  292:token tok;
        -:  293:{ 
       96:  294:  if( *tok==EOF)
        3:  295:      return(TRUE);
        -:  296:  else
       93:  297:      return(FALSE);
        -:  298:}
        -:  299:
        -:  300:/*************************************/
        -:  301:/* NAME:	is_comment           */
        -:  302:/* INPUT: 	a pointer to a token */
        -:  303:/* OUTPUT:      a BOOLEAN value      */
        -:  304:/*************************************/
        2:  305:static int is_comment(ident)
        -:  306:token ident;
        -:  307:{
        2:  308:  if( (*ident) ==59 )   /* the char is 59   */
        1:  309:     return(TRUE);
        -:  310:  else
        1:  311:     return(FALSE);
        -:  312:}
        -:  313:
        -:  314:/*************************************/
        -:  315:/* NAME:	is_keyword           */
        -:  316:/* INPUT: 	a pointer to a token */
        -:  317:/* OUTPUT:      a BOOLEAN value      */
        -:  318:/*************************************/
        7:  319:static int is_keyword(str)
        -:  320:    token  str;
        -:  321:{ 
        7:  322: if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
        7:  323:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
    #####:  324:      return(TRUE);
        -:  325:  else 
        7:  326:      return(FALSE);
        -:  327:}
        -:  328:
        -:  329:/*************************************/
        -:  330:/* NAME:	is_char_constant     */
        -:  331:/* INPUT: 	a pointer to a token */
        -:  332:/* OUTPUT:      a BOOLEAN value      */
        -:  333:/*************************************/
        3:  334:static int is_char_constant(str)
        -:  335:    token str;
        -:  336:{
        3:  337:  if ((*str)=='#' && isalpha(*(str+1)))
        1:  338:     return(TRUE);
        -:  339:  else  
        2:  340:     return(FALSE);
        -:  341:}
        -:  342:
        -:  343:/*************************************/
        -:  344:/* NAME:	is_num_constant      */
        -:  345:/* INPUT: 	a pointer to a token */
        -:  346:/* OUTPUT:      a BOOLEAN value      */
        -:  347:/*************************************/
        4:  348:static int is_num_constant(str)
        -:  349:    token  str;
        -:  350:{
        4:  351:  int i=1;
        -:  352:  
        4:  353:  if ( isdigit(*str)) 
        -:  354:    {
    #####:  355:    while ( *(str+i) != '\0' )   /* until meet token end sign */
        -:  356:      {
    #####:  357:       if(isdigit(*(str+i)))
    #####:  358:         i++;
        -:  359:       else
    #####:  360:         return(FALSE);
        -:  361:      }                         /* end WHILE */
    #####:  362:    return(TRUE);
        -:  363:    }
        -:  364:  else
        4:  365:   return(FALSE);               /* other return FALSE */
        -:  366:}
        -:  367:
        -:  368:/*************************************/
        -:  369:/* NAME:	is_str_constant      */
        -:  370:/* INPUT: 	a pointer to a token */
        -:  371:/* OUTPUT:      a BOOLEAN value      */
        -:  372:/*************************************/
        4:  373:static int is_str_constant(str)
        -:  374:    token str;
        -:  375:{
        4:  376:  int i=1;
        -:  377: 
        4:  378:  if ( *str =='"')
        2:  379:     { while (*(str+i)!='\0')  /* until meet the token end sign */
        2:  380:         { if(*(str+i)=='"')
        1:  381:             return(TRUE);        /* meet the second '"'           */
        -:  382:           else
        1:  383:           i++;
        -:  384:         }               /* end WHILE */
    #####:  385:     return(FALSE);
        -:  386:    }
        -:  387:  else
        3:  388:    return(FALSE);       /* other return FALSE */
        -:  389:}
        -:  390:/*************************************/
        -:  391:/* NAME:	is_identifier         */
        -:  392:/* INPUT: 	a pointer to a token */
        -:  393:/* OUTPUT:      a BOOLEAN value      */
        -:  394:/*************************************/
        6:  395:static int is_identifier(str)
        -:  396:    token  str;
        -:  397:{
        6:  398:  int i=1;
        -:  399:
        6:  400:  if ( isalpha( *str) ) 
        -:  401:     {
        8:  402:        while(  *(str+i) !='\0' )   /* unti meet the end token sign */
        -:  403:           { 
       6*:  404:            if(isalpha(*(str+i)) || isdigit(*(str+i)))   
        6:  405:               i++;
        -:  406:            else
    #####:  407:               return(FALSE);
        -:  408:           }      /* end WHILE */
        2:  409:     return(TRUE);
        -:  410:     }
        -:  411:  else
        4:  412:     return(FALSE);
        -:  413:}
        -:  414:
        -:  415:/******************************************/
        -:  416:/* NAME:	unget_error               */
        -:  417:/* INPUT:       a pointer to token stream */
        -:  418:/* OUTPUT: 	print error message       */
        -:  419:/******************************************/
    #####:  420:static unget_error(fp)
        -:  421:character_stream *fp;
        -:  422:{
    #####:  423:fprintf(stdout,"It can not get charcter\n");
    #####:  424:}
        -:  425:
        -:  426:/*************************************************/
        -:  427:/* NAME:        print_spec_symbol                */
        -:  428:/* INPUT:       a pointer to a spec_symbol token */
        -:  429:/* OUTPUT :     print out the spec_symbol token  */
        -:  430:/*              according to the form required   */
        -:  431:/*************************************************/
        1:  432:static void print_spec_symbol(str)
        -:  433:token str;
        -:  434:{
        1:  435:    if      (!strcmp(str,"("))
        -:  436:    {
    #####:  437:             fprintf(stdout, "%s\n","lparen.");
    #####:  438:             return;
        -:  439:    } 
        1:  440:    if (!strcmp(str,")"))
        -:  441:    {
    #####:  442:             fprintf(stdout, "%s\n","rparen.");
    #####:  443:             return;
        -:  444:    }
        1:  445:    if (!strcmp(str,"["))
        -:  446:    {
    #####:  447:             fprintf(stdout, "%s\n","lsquare.");
    #####:  448:             return;
        -:  449:    }
        1:  450:    if (!strcmp(str,"]"))
        -:  451:    {
    #####:  452:             fprintf(stdout, "%s\n","rsquare.");
    #####:  453:             return;
        -:  454:    }
        1:  455:    if (!strcmp(str,"'"))
        -:  456:    {
    #####:  457:             fprintf(stdout, "%s\n","quote.");
    #####:  458:             return;
        -:  459:    }
        1:  460:    if (!strcmp(str,"`"))
        -:  461:    {
        1:  462:             fprintf(stdout, "%s\n","bquote.");
        1:  463:             return;
        -:  464:    }
        -:  465:    
    #####:  466:             fprintf(stdout, "%s\n","comma.");
        -:  467:}
        -:  468:
        -:  469:
        -:  470:/*************************************/
        -:  471:/* NAME:        is_spec_symbol       */
        -:  472:/* INPUT:       a pointer to a token */
        -:  473:/* OUTPUT:      a BOOLEAN value      */
        -:  474:/*************************************/
       32:  475:static int is_spec_symbol(str)
        -:  476:    token str;
        -:  477:{
       32:  478:    if (!strcmp(str,"("))
        -:  479:    {  
    #####:  480:        return(TRUE);
        -:  481:    }
       32:  482:    if (!strcmp(str,")"))
        -:  483:    {
    #####:  484:        return(TRUE);
        -:  485:    }
       32:  486:    if (!strcmp(str,"["))
        -:  487:    {
    #####:  488:        return(TRUE);
        -:  489:    }
       32:  490:    if (!strcmp(str,"]"))
        -:  491:    {
    #####:  492:        return(TRUE);
        -:  493:    }
       32:  494:    if (!strcmp(str,"'"))
        -:  495:    {
    #####:  496:        return(TRUE);
        -:  497:    }
       32:  498:    if (!strcmp(str,"`"))
        -:  499:    {
        4:  500:        return(TRUE);
        -:  501:    }
       28:  502:    if (!strcmp(str,","))
        -:  503:    {
    #####:  504:        return(TRUE);
        -:  505:    }
       28:  506:    return(FALSE);     /* others return FALSE */
        -:  507:}
        -:  508:
        -:  509:
