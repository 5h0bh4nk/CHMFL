        -:    0:Source:SIMENS_REPOSITORY/print_tokens2/print_tokens2_mutants/v2/print_tokens2.c
        -:    0:Graph:SIMENS_REPOSITORY/print_tokens2/print_tokens2_mutants/v2/print_tokens2.gcno
        -:    0:Data:SIMENS_REPOSITORY/print_tokens2/print_tokens2_mutants/v2/print_tokens2.gcda
        -:    0:Runs:1
        -:    1:/***********************************************/
        -:    2:/*  assgnment.5  Shu Z. A00042813 for CS453    */
        -:    3:/*  using the tokenizer and stream module      */
        -:    4:/*  print_tokens.c Code                        */
        -:    5:/***********************************************/
        -:    6:
        -:    7:/***********************************************/
        -:    8:/* NAME:	print_tokens                   */
        -:    9:/* INPUT:	a filename                     */
        -:   10:/* OUTPUT:      print out the token stream     */
        -:   11:/* DESCRIPTION: using the tokenizer interface  */
        -:   12:/*              to print out the token stream  */
        -:   13:/***********************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <ctype.h>
        -:   16:#include <string.h>
        -:   17:#include "tokens.h"
        -:   18:#define TRUE 1
        -:   19:#define FALSE 0
        -:   20:
        1:   21:main(argc,argv)
        -:   22:int argc;
        -:   23:char *argv[3];
        -:   24:{  char *fname;
        -:   25:   token tok;
        -:   26:   token_stream tp;
        1:   27:     if(argc==1)                  /* if not given filename,take as '""' */
        -:   28:       {
        1:   29:        fname= (char *) malloc(sizeof(char));
        1:   30:        *fname = '\0';
        -:   31:       }
    #####:   32:     else if(argc==2)
    #####:   33:        fname= argv[1];
        -:   34:     else
    #####:   35:       { fprintf(stdout, "Error!,please give the token stream\n");
    #####:   36:         exit(0);
        -:   37:       }
        1:   38:    tp=open_token_stream(fname);  /* open token stream */
        1:   39:    tok=get_token(tp);
       57:   40:    while (is_eof_token(tok) ==FALSE) /* take one token each time until eof */
        -:   41:    {
       56:   42:       print_token(tok);
       56:   43:       tok=get_token(tp);
        -:   44:    }
        1:   45:    print_token(tok); /* print eof signal */
        1:   46:    exit(0);
        -:   47:}
        -:   48:
        -:   49:/* stream.c code */
        -:   50:
        -:   51:/***********************************************/
        -:   52:/* NMAE:	open_character_stream          */
        -:   53:/* INPUT:       a filename                     */
        -:   54:/* OUTPUT:      a pointer to chacracter_stream */
        -:   55:/* DESCRIPTION: when not given a filename,     */
        -:   56:/*              open stdin,otherwise open      */
        -:   57:/*              the existed file               */
        -:   58:/***********************************************/
        1:   59:character_stream open_character_stream(fname)
        -:   60:char *fname;
        -:   61:{ character_stream fp;
        1:   62:  if(fname == NULL)
        1:   63:     fp=stdin;
    #####:   64:  else if ((fp=fopen(fname,"r"))== NULL)
        -:   65:  {
    #####:   66:       fprintf(stdout, "The file %s doesn't exists\n",fname);
    #####:   67:       exit(0);
        -:   68:  }
        1:   69:  return(fp);
        -:   70:}
        -:   71:
        -:   72:/**********************************************/
        -:   73:/* NAME:	get_char                      */
        -:   74:/* INPUT:       a pointer to char_stream      */
        -:   75:/* OUTPUT:      a character                   */
        -:   76:/**********************************************/
      503:   77:char get_char(fp)
        -:   78:character_stream fp;
        -:   79:{ char ch;
      503:   80:  ch=getc(fp);
      503:   81:  return(ch);
        -:   82:}
        -:   83:
        -:   84:/***************************************************/
        -:   85:/* NAME:      unget_char                           */
        -:   86:/* INPUT:     a pointer to char_stream,a character */
        -:   87:/* OUTPUT:    a character                          */
        -:   88:/* DESCRIPTION:when unable to put back,return EOF  */
        -:   89:/***************************************************/
       17:   90:char unget_char(ch,fp)
        -:   91:character_stream fp;
        -:   92:char ch;
        -:   93:{ char c;
       17:   94:  c=ungetc(ch,fp);
       17:   95:  if(c ==EOF)
        -:   96:    {
    #####:   97:     return(c);
        -:   98:    }
        -:   99:  else
       17:  100:     return(c);
        -:  101:}
        -:  102:
        -:  103:/* tokenizer.c code */
        -:  104:
        -:  105:
        -:  106:char buffer[81];  /* fixed array length MONI */ /* to store the token temporar */
        -:  107:
        -:  108:
        -:  109:static int is_spec_symbol();
        -:  110:static int is_token_end();
        -:  111:static unget_error();
        -:  112:static int is_keyword();
        -:  113:static int is_identifier();
        -:  114:static int is_num_constant();
        -:  115:static int is_char_constant();
        -:  116:static int is_str_constant();
        -:  117:static int is_comment();
        -:  118:static void print_spec_symbol();
        -:  119:
        -:  120:/********************************************************/
        -:  121:/* NAME:	open_token_stream                       */
        -:  122:/* INPUT:       a filename                              */
        -:  123:/* OUTPUT:      a pointer to a token_stream             */
        -:  124:/* DESCRIPTION: when filename is EMPTY,choice standard  */
        -:  125:/*              input device as input source            */
        -:  126:/********************************************************/
        1:  127:token_stream open_token_stream(fname)
        -:  128:char *fname;
        -:  129:{
        -:  130: token_stream fp;
        1:  131: if(strcmp(fname,"")==0)
        1:  132:    fp=open_character_stream(NULL);
        -:  133: else
    #####:  134:    fp=open_character_stream(fname);
        1:  135: return(fp);
        -:  136:}
        -:  137:
        -:  138:/********************************************************/
        -:  139:/* NAME :	get_token                               */
        -:  140:/* INPUT: 	a pointer to the tokens_stream          */
        -:  141:/* OUTPUT:      a token                                 */
        -:  142:/* DESCRIPTION: according the syntax of tokens,dealing  */
        -:  143:/*              with different case  and get one token  */
        -:  144:/********************************************************/
       57:  145:token get_token(tp)
        -:  146:token_stream tp;
        -:  147:{ 
       57:  148:  int i=0,j;
       57:  149:  int id=0;
        -:  150:  char ch,ch1[2];
     4674:  151:  for (j=0;j<=80;j++)          /* initial the buffer   */
     4617:  152:      { buffer[j]='\0';} 
       57:  153:   ch1[0]='\0';
       57:  154:   ch1[1]='\0';
       57:  155:   ch=get_char(tp);
       60:  156:   while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
        -:  157:      {
        3:  158:       ch=get_char(tp);
        -:  159:      } 
       57:  160:   buffer[i]=ch;
       57:  161:   if(is_eof_token(buffer)==TRUE)return(buffer);
       56:  162:   if(is_spec_symbol(buffer)==TRUE)return(buffer); 
       40:  163:   if(ch =='"')id=1;    /* prepare for string */
       40:  164:   if(ch ==59)id=2;    /* prepare for comment */
       40:  165:   ch=get_char(tp);
        -:  166:
      443:  167:   while (is_token_end(id,ch) == FALSE)/* until meet the end character */
        -:  168:   {
      403:  169:       i++;
      403:  170:       buffer[i]=ch;
      403:  171:       ch=get_char(tp);
        -:  172:   }
       40:  173:   ch1[0]=ch;                        /* hold the end charcater          */
       40:  174:   if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
    #####:  175:      { ch=unget_char(ch,tp);        /* then put back eof on token_stream */
    #####:  176:        if(ch==EOF)unget_error(tp);
    #####:  177:        return(buffer);
        -:  178:      }
       40:  179:   if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
       13:  180:      { ch=unget_char(ch,tp);        /* then put back this character       */
      13*:  181:        if(ch==EOF)unget_error(tp);
       13:  182:        return(buffer);
        -:  183:      }
       27:  184:   if(id==1)                  /* if end character is " and is string */
        4:  185:     { i++;                     /* case,hold the second " in buffer    */
        4:  186:       buffer[i]=ch;
        4:  187:       return(buffer); 
        -:  188:     }
       23:  189:   if(id==0 && ch==59)
        -:  190:                                   /* when not in string or comment,meet ";" */
        4:  191:     { ch=unget_char(ch,tp);       /* then put back this character         */
        -:  192:/*       if(ch==EOF)        */
        4:  193:          unget_error(tp);
        4:  194:       return(buffer); 
        -:  195:     }
       19:  196:  return(buffer);                   /* return nomal case token             */
        -:  197:}
        -:  198:
        -:  199:/*******************************************************/
        -:  200:/* NAME:	is_token_end                           */
        -:  201:/* INPUT:       a character,a token status             */
        -:  202:/* OUTPUT:	a BOOLEAN value                        */
        -:  203:/*******************************************************/
      443:  204:static int is_token_end(str_com_id,ch)
        -:  205:char ch;
        -:  206:int str_com_id;
        -:  207:{ char ch1[2];  /* fixed array declaration MONI */
      443:  208: ch1[0]=ch;
      443:  209: ch1[1]='\0';
     443*:  210: if(is_eof_token(ch1)==TRUE)return(TRUE); /* is eof token? */
      443:  211: if(str_com_id==1)          /* is string token */
       42:  212:    { if(ch=='"' | ch=='\n')   /* for string until meet another " */
        4:  213:         return(TRUE);
        -:  214:      else
       38:  215:         return(FALSE);
        -:  216:    }
        -:  217:
      401:  218: if(str_com_id==2)    /* is comment token */
      115:  219:   { if(ch=='\n')     /* for comment until meet end of line */
        4:  220:        return(TRUE);
        -:  221:      else
      111:  222:        return(FALSE);
        -:  223:   }
        -:  224:
      286:  225: if(is_spec_symbol(ch1)==TRUE) return(TRUE); /* is special_symbol? */
      273:  226: if(ch ==' ' || ch=='\n' || ch==59) return(TRUE); 
        -:  227:                              /* others until meet blank or tab or 59 */
      254:  228: return(FALSE);               /* other case,return FALSE */
        -:  229:}
        -:  230:
        -:  231:/****************************************************/
        -:  232:/* NAME :	token_type                          */
        -:  233:/* INPUT:       a pointer to the token              */
        -:  234:/* OUTPUT:      an integer value                    */
        -:  235:/* DESCRIPTION: the integer value is corresponding  */
        -:  236:/*              to the different token type         */
        -:  237:/****************************************************/
       57:  238:static int token_type(tok)
        -:  239:token tok;
        -:  240:{ 
       57:  241: if(is_keyword(tok))return(keyword);
       54:  242: if(is_spec_symbol(tok))return(spec_symbol);
       38:  243: if(is_identifier(tok))return(identifier);
       31:  244: if(is_num_constant(tok))return(num_constant);
       29:  245: if(is_str_constant(tok))return(str_constant);
       25:  246: if(is_char_constant(tok))return(char_constant);
       20:  247: if(is_comment(tok))return(comment);
       16:  248: if(is_eof_token(tok))return(end);
       15:  249: return(error);                    /* else look as error token */
        -:  250:}
        -:  251:
        -:  252:/****************************************************/
        -:  253:/* NAME:	print_token                         */
        -:  254:/* INPUT:	a pointer to the token              */
        -:  255:/* OUTPUT:      a BOOLEAN value,print out the token */
        -:  256:/*              according the forms required        */
        -:  257:/****************************************************/
       57:  258:int print_token(tok)
        -:  259:token tok;
        -:  260:{ int type;
       57:  261:  type=token_type(tok);
       57:  262: if(type==error)
       15:  263:   { fprintf(stdout, "error,\"%s\".\n",tok);
        -:  264:   } 
       57:  265: if(type==keyword)
        3:  266:   {fprintf(stdout, "keyword,\"%s\".\n",tok);
        -:  267:   }
       57:  268: if(type==spec_symbol)print_spec_symbol(tok);
       57:  269: if(type==identifier)
        7:  270:   {fprintf(stdout, "identifier,\"%s\".\n",tok);
        -:  271:   }
       57:  272: if(type==num_constant)
        2:  273:   {fprintf(stdout, "numeric,%s.\n",tok);
        -:  274:   }
       57:  275: if(type==str_constant)
        4:  276:   {fprintf(stdout, "string,%s.\n",tok);
        -:  277:   }
       57:  278: if(type==char_constant)
        5:  279:   {tok=tok+1;
        5:  280:    fprintf(stdout, "character,\"%s\".\n",tok);
        -:  281:   }
       57:  282: if(type==end) 
        1:  283:   fprintf(stdout, "eof.\n");
       57:  284:   }
        -:  285:
        -:  286:/* the code for tokens judgment function */
        -:  287:
        -:  288:/*************************************/
        -:  289:/* NAME:	is_eof_token         */
        -:  290:/* INPUT: 	a pointer to a token */
        -:  291:/* OUTPUT:      a BOOLEAN value      */
        -:  292:/*************************************/
      613:  293:int is_eof_token(tok)
        -:  294:token tok;
        -:  295:{ 
      613:  296:  if( *tok==EOF)
        3:  297:      return(TRUE);
        -:  298:  else
      610:  299:      return(FALSE);
        -:  300:}
        -:  301:
        -:  302:/*************************************/
        -:  303:/* NAME:	is_comment           */
        -:  304:/* INPUT: 	a pointer to a token */
        -:  305:/* OUTPUT:      a BOOLEAN value      */
        -:  306:/*************************************/
       20:  307:static int is_comment(ident)
        -:  308:token ident;
        -:  309:{
       20:  310:  if( (*ident) ==59 )   /* the char is 59   */
        4:  311:     return(TRUE);
        -:  312:  else
       16:  313:     return(FALSE);
        -:  314:}
        -:  315:
        -:  316:/*************************************/
        -:  317:/* NAME:	is_keyword           */
        -:  318:/* INPUT: 	a pointer to a token */
        -:  319:/* OUTPUT:      a BOOLEAN value      */
        -:  320:/*************************************/
       57:  321:static int is_keyword(str)
        -:  322:    token  str;
        -:  323:{ 
       57:  324: if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
       55:  325:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
        3:  326:      return(TRUE);
        -:  327:  else 
       54:  328:      return(FALSE);
        -:  329:}
        -:  330:
        -:  331:/*************************************/
        -:  332:/* NAME:	is_char_constant     */
        -:  333:/* INPUT: 	a pointer to a token */
        -:  334:/* OUTPUT:      a BOOLEAN value      */
        -:  335:/*************************************/
       25:  336:static int is_char_constant(str)
        -:  337:    token str;
        -:  338:{
       25:  339:  if ((*str)=='#' && isalpha(*(str+1)))
        5:  340:     return(TRUE);
        -:  341:  else  
       20:  342:     return(FALSE);
        -:  343:}
        -:  344:
        -:  345:/*************************************/
        -:  346:/* NAME:	is_num_constant      */
        -:  347:/* INPUT: 	a pointer to a token */
        -:  348:/* OUTPUT:      a BOOLEAN value      */
        -:  349:/*************************************/
       31:  350:static int is_num_constant(str)
        -:  351:    token  str;
        -:  352:{
       31:  353:  int i=1;
        -:  354:  
       31:  355:  if ( isdigit(*str)) 
        -:  356:    {
        4:  357:    while ( *(str+i) != '\0' )   /* until meet token end sign */
        -:  358:      {
        2:  359:       if(isdigit(*(str+i)))
        1:  360:         i++;
        -:  361:       else
        1:  362:         return(FALSE);
        -:  363:      }                         /* end WHILE */
        2:  364:    return(TRUE);
        -:  365:    }
        -:  366:  else
       28:  367:   return(FALSE);               /* other return FALSE */
        -:  368:}
        -:  369:
        -:  370:/*************************************/
        -:  371:/* NAME:	is_str_constant      */
        -:  372:/* INPUT: 	a pointer to a token */
        -:  373:/* OUTPUT:      a BOOLEAN value      */
        -:  374:/*************************************/
       29:  375:static int is_str_constant(str)
        -:  376:    token str;
        -:  377:{
       29:  378:  int i=1;
        -:  379: 
       29:  380:  if ( *str =='"')
       42:  381:     { while (*(str+i)!='\0')  /* until meet the token end sign */
       42:  382:         { if(*(str+i)=='"')
        4:  383:             return(TRUE);        /* meet the second '"'           */
        -:  384:           else
       38:  385:           i++;
        -:  386:         }               /* end WHILE */
    #####:  387:     return(FALSE);
        -:  388:    }
        -:  389:  else
       25:  390:    return(FALSE);       /* other return FALSE */
        -:  391:}
        -:  392:/*************************************/
        -:  393:/* NAME:	is_identifier         */
        -:  394:/* INPUT: 	a pointer to a token */
        -:  395:/* OUTPUT:      a BOOLEAN value      */
        -:  396:/*************************************/
       38:  397:static int is_identifier(str)
        -:  398:    token  str;
        -:  399:{
       38:  400:  int i=1;
        -:  401:
       38:  402:  if ( isalpha( *str) ) 
        -:  403:     {
       63:  404:        while(  *(str+i) !='\0' )   /* unti meet the end token sign */
        -:  405:           { 
       56:  406:            if(isalpha(*(str+i)) || isdigit(*(str+i)))   
       49:  407:               i++;
        -:  408:            else
        7:  409:               return(FALSE);
        -:  410:           }      /* end WHILE */
        7:  411:     return(TRUE);
        -:  412:     }
        -:  413:  else
       24:  414:     return(FALSE);
        -:  415:}
        -:  416:
        -:  417:/******************************************/
        -:  418:/* NAME:	unget_error               */
        -:  419:/* INPUT:       a pointer to token stream */
        -:  420:/* OUTPUT: 	print error message       */
        -:  421:/******************************************/
        4:  422:static unget_error(fp)
        -:  423:character_stream *fp;
        -:  424:{
        4:  425:fprintf(stdout,"It can not get charcter\n");
        4:  426:}
        -:  427:
        -:  428:/*************************************************/
        -:  429:/* NAME:        print_spec_symbol                */
        -:  430:/* INPUT:       a pointer to a spec_symbol token */
        -:  431:/* OUTPUT :     print out the spec_symbol token  */
        -:  432:/*              according to the form required   */
        -:  433:/*************************************************/
       16:  434:static void print_spec_symbol(str)
        -:  435:token str;
        -:  436:{
       16:  437:    if      (!strcmp(str,"("))
        -:  438:    {
        3:  439:             fprintf(stdout, "%s\n","lparen.");
        3:  440:             return;
        -:  441:    } 
       13:  442:    if (!strcmp(str,")"))
        -:  443:    {
        1:  444:             fprintf(stdout, "%s\n","rparen.");
        1:  445:             return;
        -:  446:    }
       12:  447:    if (!strcmp(str,"["))
        -:  448:    {
        2:  449:             fprintf(stdout, "%s\n","lsquare.");
        2:  450:             return;
        -:  451:    }
       10:  452:    if (!strcmp(str,"]"))
        -:  453:    {
        5:  454:             fprintf(stdout, "%s\n","rsquare.");
        5:  455:             return;
        -:  456:    }
        5:  457:    if (!strcmp(str,"'"))
        -:  458:    {
        2:  459:             fprintf(stdout, "%s\n","quote.");
        2:  460:             return;
        -:  461:    }
        3:  462:    if (!strcmp(str,"`"))
        -:  463:    {
        1:  464:             fprintf(stdout, "%s\n","bquote.");
        1:  465:             return;
        -:  466:    }
        -:  467:    
        2:  468:             fprintf(stdout, "%s\n","comma.");
        -:  469:}
        -:  470:
        -:  471:
        -:  472:/*************************************/
        -:  473:/* NAME:        is_spec_symbol       */
        -:  474:/* INPUT:       a pointer to a token */
        -:  475:/* OUTPUT:      a BOOLEAN value      */
        -:  476:/*************************************/
      436:  477:static int is_spec_symbol(str)
        -:  478:    token str;
        -:  479:{
      436:  480:    if (!strcmp(str,"("))
        -:  481:    {  
       10:  482:        return(TRUE);
        -:  483:    }
      426:  484:    if (!strcmp(str,")"))
        -:  485:    {
        4:  486:        return(TRUE);
        -:  487:    }
      422:  488:    if (!strcmp(str,"["))
        -:  489:    {
        8:  490:        return(TRUE);
        -:  491:    }
      414:  492:    if (!strcmp(str,"]"))
        -:  493:    {
       18:  494:        return(TRUE);
        -:  495:    }
      396:  496:    if (!strcmp(str,"'"))
        -:  497:    {
        6:  498:        return(TRUE);
        -:  499:    }
      390:  500:    if (!strcmp(str,"`"))
        -:  501:    {
        4:  502:        return(TRUE);
        -:  503:    }
      386:  504:    if (!strcmp(str,","))
        -:  505:    {
        8:  506:        return(TRUE);
        -:  507:    }
      378:  508:    return(FALSE);     /* others return FALSE */
        -:  509:}
        -:  510:
        -:  511:
