        -:    0:Source:schedule2.c
        -:    0:Graph:schedule2.gcno
        -:    0:Data:schedule2.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* $Log: schedule.c,v $
        -:    3: * Revision 1.4  1993/05/04  12:23:58  foster
        -:    4: * Debug stuff removed
        -:    5: *
        -:    6: * Revision 1.3  1993/05/03  20:27:04  foster
        -:    7: * Full Functionality
        -:    8: *
        -:    9: * Revision 1.2  1993/05/03  15:41:01  foster
        -:   10: * Restructure functions
        -:   11: *
        -:   12: * Revision 1.1  1993/05/01  11:38:04  foster
        -:   13: * Initial revision
        -:   14: * */
        -:   15:
        -:   16:#include <stdio.h>
        -:   17:#include "schedule2.h"
        -:   18:
        -:   19:static struct process * current_job;
        -:   20:static int next_pid = 0;
        -:   21:
        -:   22:int
       70:   23:enqueue(prio, new_process)
        -:   24:     int prio;
        -:   25:     struct process *new_process;
        -:   26:{
        -:   27:    int status;
      70*:   28:    if(status = put_end(prio, new_process)) return(status); /* Error */
       70:   29:    return(reschedule(prio));
        -:   30:}
        -:   31:
        -:   32:struct queue
        -:   33:{
        -:   34:    int length;
        -:   35:    struct process *head;
        -:   36:};
        -:   37:
        -:   38:static struct queue prio_queue[MAXPRIO + 1]; /* blocked queue is [0] */
        -:   39:
        -:   40:
        -:   41:
        1:   42:main(argc, argv) /* n3, n2, n1 : # of processes at prio3 ... */
        -:   43:int argc;
        -:   44:char *argv[];
        -:   45:{
        -:   46:    int command, prio;
        -:   47:    float ratio;
        -:   48:    int nprocs, status, pid;
        -:   49:    struct process *process;
       1*:   50:    if(argc != MAXPRIO + 1) exit_here(BADNOARGS);
        4:   51:    for(prio = MAXPRIO; prio > 0; prio--)
        -:   52:    {
       3*:   53:	if((nprocs = atoi(argv[MAXPRIO + 1 - prio])) < 0) exit_here(BADARG);
       21:   54:	for(; nprocs > 0; nprocs--)
        -:   55:	{
      18*:   56:	    if(status = new_job(prio)) exit_here(status);
        -:   57:	}
        -:   58:    }
        -:   59:    /* while there are commands, schedule it */
      192:   60:    while((status = get_command(&command, &prio, &ratio)) > 0)
        -:   61:    {
      191:   62:	schedule(command, prio, ratio);
        -:   63:    }
       1*:   64:    if(status < 0) exit_here(status); /* Real bad error */
        1:   65:    exit_here(OK);
        -:   66:}
        -:   67:
        -:   68:int 
      192:   69:get_command(command, prio, ratio)
        -:   70:    int *command, *prio;
        -:   71:    float *ratio;
        -:   72:{
      192:   73:    int status = OK;
        -:   74:    char buf[CMDSIZE];
      192:   75:    if(fgets(buf, CMDSIZE, stdin))
        -:   76:    {
      191:   77:	*prio = *command = -1; *ratio =-1.0;
      191:   78:	sscanf(buf, "%d", command);
      191:   79:	switch(*command)
        -:   80:	{
       24:   81:	  case NEW_JOB :
       24:   82:	    sscanf(buf, "%*s%d", prio);
       24:   83:	    break;
       22:   84:	  case UNBLOCK :
       22:   85:	    sscanf(buf, "%*s%f", ratio);
       22:   86:	    break;
       33:   87:	  case UPGRADE_PRIO :
       33:   88:	    sscanf(buf, "%*s%d%f", prio, ratio);
       33:   89:	    break;
        -:   90:	}
        -:   91:	 /* Find end of  line of input if no EOF */
     191*:   92:	while(buf[strlen(buf)-1] != '\n' && fgets(buf, CMDSIZE, stdin));
      191:   93:	return(TRUE);
        -:   94:    }
        1:   95:    else return(FALSE);
        -:   96:}
        -:   97:
        1:   98:exit_here(status)
        -:   99:     int status;
        -:  100:{
        1:  101:    exit(abs(status));
        -:  102:}
        -:  103:
        -:  104:
        -:  105:int 
       42:  106:new_job(prio) /* allocate new pid and process block. Stick at end */
        -:  107:     int prio;
        -:  108:{
       42:  109:    int pid, status = OK;
        -:  110:    struct process *new_process;
      42*:  111:    if(prio < 1) return(BADPRIO); /* Mustn't allow 0 */
       42:  112:    pid = next_pid++;
       42:  113:    new_process = (struct process *) malloc(sizeof(struct process));
      42*:  114:    if(!new_process) status = MALLOC_ERR;
        -:  115:    else
        -:  116:    {
       42:  117:	new_process->pid = pid;
       42:  118:	new_process->priority = prio;
       42:  119:	new_process->next = (struct process *) 0;
       42:  120:	status = enqueue(prio, new_process);
       42:  121:	if(status)
        -:  122:	{
    #####:  123:	    free(new_process); /* Return process block */
        -:  124:	}
        -:  125:    }
      42*:  126:    if(status) next_pid--; /* Unsuccess. Restore pid */
       42:  127:    return(status);
        -:  128:}
        -:  129:
       33:  130:int upgrade_prio(prio, ratio) /* increment priority at ratio in queue */
        -:  131:     int prio;
        -:  132:     float ratio;
        -:  133:{
        -:  134:    int status;
        -:  135:    struct process * job;
       33:  136:    if(prio < 1 || prio > MAXLOPRIO) return(BADPRIO);
       20:  137:    if((status = get_process(prio, ratio, &job)) <= 0) return(status);
        -:  138:    /* We found a job in that queue. Upgrade it */
        1:  139:    job->priority = prio + 1;
        1:  140:    return(enqueue(prio + 1, job));
        -:  141:}
        -:  142:
        -:  143:int
       23:  144:block() /* Put current job in blocked queue */
        -:  145:{
        -:  146:    struct process * job;
       23:  147:    job = get_current();
       23:  148:    if(job)
        -:  149:    {
        9:  150:	current_job = (struct process *)0; /* remove it */
        9:  151:	return(enqueue(BLOCKPRIO, job)); /* put into blocked queue */
        -:  152:    }
       14:  153:    return(OK);
        -:  154:}
        -:  155:
        -:  156:int
       22:  157:unblock(ratio) /* Restore job @ ratio in blocked queue to its queue */
        -:  158:     float ratio;
        -:  159:{
        -:  160:    int status;
        -:  161:    struct process * job;
       22:  162:    if((status = get_process(BLOCKPRIO, ratio, &job)) <= 0) return(status);
        -:  163:    /* We found a blocked process. Put it where it belongs. */
        9:  164:    return(enqueue(job->priority, job));
        -:  165:}
        -:  166:
        -:  167:int
       18:  168:quantum_expire() /* put current job at end of its queue */
        -:  169:{
        -:  170:    struct process * job;
       18:  171:    job = get_current();
       18:  172:    if(job)
        -:  173:    {
        9:  174:	current_job = (struct process *)0; /* remove it */
        9:  175:	return(enqueue(job->priority, job));
        -:  176:    }
        9:  177:    return(OK);
        -:  178:}
        -:  179:
        -:  180:int
       82:  181:finish() /* Get current job, print it, and zap it. */
        -:  182:{
        -:  183:    struct process * job;
       82:  184:    job = get_current();
       82:  185:    if(job)
        -:  186:    {
       40:  187:	current_job = (struct process *)0;
       40:  188:	reschedule(0);
       40:  189:	fprintf(stdout, " %d", job->pid);
       40:  190:	free(job);
       40:  191:	return(FALSE);
        -:  192:    }
       42:  193:    else return(TRUE);
        -:  194:}
        -:  195:
        -:  196:int
       27:  197:flush() /* Get all jobs in priority queues & zap them */
        -:  198:{
       58:  199:    while(!finish());
       27:  200:    fprintf(stdout, "\n");
       27:  201:    return(OK);
        -:  202:}
        -:  203:
        -:  204:struct process * 
      233:  205:get_current() /* If no current process, get it. Return it */
        -:  206:{
        -:  207:    int prio;
      233:  208:    if(!current_job)
        -:  209:    {
      470:  210:	for(prio = MAXPRIO; prio > 0; prio--)
        -:  211:	{ /* find head of highest queue with a process */
      385:  212:	    if(get_process(prio, 0.0, &current_job) > 0) break;
        -:  213:	}
        -:  214:    }
      233:  215:    return(current_job);
        -:  216:}
        -:  217:
        -:  218:int
      110:  219:reschedule(prio) /* Put highest priority job into current_job */
        -:  220:     int prio;
        -:  221:{
      110:  222:    if(current_job && prio > current_job->priority)
        -:  223:    {
        5:  224:	put_end(current_job->priority, current_job);
        5:  225:	current_job = (struct process *)0;
        -:  226:    }
      110:  227:    get_current(); /* Reschedule */
      110:  228:    return(OK);
        -:  229:}
        -:  230:
        -:  231:int 
      191:  232:schedule(command, prio, ratio)
        -:  233:    int command, prio;
        -:  234:    float ratio;
        -:  235:{
      191:  236:    int status = OK;
      191:  237:    switch(command)
        -:  238:    {
       24:  239:      case NEW_JOB :
       24:  240:        status = new_job(prio);
       24:  241:	break;
       18:  242:      case QUANTUM_EXPIRE :
       18:  243:        status = quantum_expire();
       18:  244:	break;
       33:  245:      case UPGRADE_PRIO :
       33:  246:        status = upgrade_prio(prio, ratio);
       33:  247:	break;
       23:  248:      case BLOCK :
       23:  249:        status = block();
       23:  250:	break;
       22:  251:      case UNBLOCK :
       22:  252:        status = unblock(ratio);
       22:  253:	break;
       24:  254:      case FINISH :
       24:  255:        finish();
       24:  256:	fprintf(stdout, "\n");
       24:  257:	break;
       27:  258:      case FLUSH :
       27:  259:        status = flush();
       27:  260:	break;
       20:  261:      default:
       20:  262:	status = NO_COMMAND;
        -:  263:    }
      191:  264:    return(status);
        -:  265:}
        -:  266:
        -:  267:
        -:  268:
        -:  269:
        -:  270:int 
       75:  271:put_end(prio, process) /* Put process at end of queue */
        -:  272:     int prio;
        -:  273:     struct process *process;
        -:  274:{
        -:  275:    struct process **next;
      75*:  276:    if(prio > MAXPRIO || prio < 0) return(BADPRIO); /* Somebody goofed */
        -:  277:     /* find end of queue */
      163:  278:    for(next = &prio_queue[prio].head; *next; next = &(*next)->next);
       75:  279:    *next = process;
       75:  280:    prio_queue[prio].length++;
       75:  281:    return(OK);
        -:  282:}
        -:  283:
        -:  284:int 
      427:  285:get_process(prio, ratio, job)
        -:  286:     int prio;
        -:  287:     float ratio;
        -:  288:     struct process ** job;
        -:  289:{
        -:  290:    int length, index;
        -:  291:    struct process **next;
     427*:  292:    if(prio > MAXPRIO || prio < 0) return(BADPRIO); /* Somebody goofed */
     427*:  293:    if(ratio < 0.0 || ratio > 1.0) return(BADRATIO); /* Somebody else goofed */
      427:  294:    length = prio_queue[prio].length;
      427:  295:    index = ratio * length;
      427:  296:    index = index >= length ? length -1 : index; /* If ratio == 1.0 */
      433:  297:    for(next = &prio_queue[prio].head; index && *next; index--)
        6:  298:        next = &(*next)->next; /* Count up to it */
      427:  299:    *job = *next;
      427:  300:    if(*job)
        -:  301:    {
       74:  302:	*next = (*next)->next; /* Mend the chain */
       74:  303:	(*job)->next = (struct process *) 0; /* break this link */
       74:  304:	prio_queue[prio].length--;
       74:  305:	return(TRUE);
        -:  306:    }
      353:  307:    else return(FALSE);
        -:  308:}
