        -:    0:Source:SIMENS_REPOSITORY/print_tokens/print_tokens_mutants/v2/print_tokens.c
        -:    0:Graph:SIMENS_REPOSITORY/print_tokens/print_tokens_mutants/v2/print_tokens.gcno
        -:    0:Data:SIMENS_REPOSITORY/print_tokens/print_tokens_mutants/v2/print_tokens.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:
        -:    3:# include <ctype.h>
        -:    4:
        -:    5:# define START  5
        -:    6:# define TRUE  1
        -:    7:# define FALSE 0
        -:    8:
        -:    9:typedef int BOOLEAN;
        -:   10:typedef char *string;
        -:   11:
        -:   12:# include <stdio.h>
        -:   13:# include "tokens.h"
        -:   14:
        -:   15:static token numeric_case();
        -:   16:static token error_or_eof_case();
        -:   17:static int check_delimiter();
        -:   18:static int keyword(int state);
        -:   19:static int special(int state);
        -:   20:static skip(character_stream stream_ptr);
        -:   21:static int constant(int state,char token_str[],int token_ind);
        -:   22:static int next_state();
        -:   23:static get_actual_token(char token_str[],int token_ind);
        -:   24:
        1:   25:main(argc,argv)
        -:   26:int argc;
        -:   27:char *argv[];
        -:   28:{
        -:   29:      token token_ptr;
        -:   30:      token_stream stream_ptr;
        -:   31:
        1:   32:      if(argc>2)
        -:   33:      {
    #####:   34:          fprintf(stdout, "The format is print_tokens filename(optional)\n");
    #####:   35:          exit(1);
        -:   36:      }
        1:   37:      stream_ptr=open_token_stream(argv[1]);
        -:   38:
        2:   39:      while(!is_eof_token((token_ptr=get_token(stream_ptr))))
        1:   40:                print_token(token_ptr);
        1:   41:      print_token(token_ptr);
        1:   42:  exit(0);
        -:   43:}
        -:   44:
        -:   45:
        -:   46:
        -:   47:/* *********************************************************************
        -:   48:       Function name : open_character_stream
        -:   49:       Input         : filename 
        -:   50:       Output        : charactre stream.
        -:   51:       Exceptions    : If file name doesn't exists it will
        -:   52:                       exit from the program.
        -:   53:       Description   : The function first allocates the memory for 
        -:   54:                       the structure and initilizes it. The constant
        -:   55:                       START gives the first character available in
        -:   56:                       the stream. It ckecks whether the filename is
        -:   57:                       empty string. If it is it assigns file pointer
        -:   58:                       to stdin else it opens the respective file as input.                   * ******************************************************************* */
        -:   59:
        1:   60:character_stream open_character_stream(FILENAME)
        -:   61:string FILENAME;
        -:   62:{
        -:   63:      character_stream stream_ptr;
        -:   64:
        1:   65:      stream_ptr=(character_stream)malloc(sizeof(struct stream_type));
        1:   66:      stream_ptr->stream_ind=START;
        1:   67:      stream_ptr->stream[START]='\0';
        1:   68:      if(FILENAME == NULL)
        1:   69:          stream_ptr->fp=stdin;
    #####:   70:      else if((stream_ptr->fp=fopen(FILENAME,"r"))==NULL)
        -:   71:           {
    #####:   72:               fprintf(stdout, "The file %s doesn't exists\n",FILENAME);
    #####:   73:               exit(0);
        -:   74:           }
        1:   75:      return(stream_ptr);
        -:   76:}
        -:   77:
        -:   78:/* *********************************************************************
        -:   79:   Function name : get_char
        -:   80:   Input         : charcter_stream.
        -:   81:   Output        : character.
        -:   82:   Exceptions    : None.
        -:   83:   Description   : This function takes character_stream type variable 
        -:   84:                   as input and returns one character. If the stream is
        -:   85:                   empty then it reads the next line from the file and
        -:   86:                   returns the character.       
        -:   87: * ****************************************************************** */
        -:   88:
       42:   89:CHARACTER get_char(stream_ptr)
        -:   90:character_stream stream_ptr;
        -:   91:{
       42:   92:      if(stream_ptr->stream[stream_ptr->stream_ind] == '\0')
        -:   93:      {
        3:   94:              if(fgets(stream_ptr->stream+START,80-START,stream_ptr->fp) == NULL)/* Fix bug: add -START - hf*/
        1:   95:                    stream_ptr->stream[START]=EOF;
        3:   96:              stream_ptr->stream_ind=START;
        -:   97:      }
       42:   98:      return(stream_ptr->stream[(stream_ptr->stream_ind)++]);
        -:   99:}
        -:  100:
        -:  101:/* *******************************************************************
        -:  102:   Function name : is_end_of_character_stream.
        -:  103:   Input         : character_stream.
        -:  104:   Output        : Boolean value.
        -:  105:   Description   : This function checks whether it is end of character
        -:  106:                   stream or not. It returns BOOLEANvariable which is 
        -:  107:                   true or false. The function checks whether the last 
        -:  108:                   read character is end file character or not and
        -:  109:                   returns the value according to it.
        -:  110: * ****************************************************************** */
        -:  111:
       36:  112:BOOLEAN is_end_of_character_stream(stream_ptr)
        -:  113:character_stream stream_ptr;
        -:  114:{
       36:  115:      if(stream_ptr->stream[stream_ptr->stream_ind-1] == EOF)
        1:  116:            return(TRUE);
        -:  117:      else
       35:  118:            return(FALSE);
        -:  119:}
        -:  120:
        -:  121:/* *********************************************************************
        -:  122:   Function name : unget_char
        -:  123:   Input         : character,character_stream.
        -:  124:   Output        : void.
        -:  125:   Description   : This function adds the character ch to the stream. 
        -:  126:                   This is accomplished by decrementing the stream_ind
        -:  127:                   and storing it in the stream. If it is not possible
        -:  128:                   to unget the character then it returns
        -:  129: * ******************************************************************* */
        -:  130:
        1:  131:unget_char(ch,stream_ptr)
        -:  132:CHARACTER ch;
        -:  133:character_stream stream_ptr;
        -:  134:{
        1:  135:      if(stream_ptr->stream_ind == 0)
    #####:  136:          return;
        -:  137:      else
        1:  138:          stream_ptr->stream[--(stream_ptr->stream_ind)]=ch;
        1:  139:      return;
        -:  140:}
        -:  141:
        -:  142:
        -:  143:/* *******************************************************************
        -:  144:   Function name : open_token_stream
        -:  145:   Input         : filename
        -:  146:   Output        : token_stream
        -:  147:   Exceptions    : Exits if the file specified by filename not found.
        -:  148:   Description   : This function takes filename as input and opens the
        -:  149:                   token_stream which is nothing but the character stream.
        -:  150:                   This function allocates the memory for token_stream 
        -:  151:                   and calls open_character_stream to open the file as
        -:  152:                   input. This function returns the token_stream.
        -:  153: * ****************************************************************** */
        -:  154:
        1:  155:token_stream open_token_stream(FILENAME)
        -:  156:string FILENAME;
        -:  157:{
        -:  158:    token_stream token_ptr;
        -:  159:  
        1:  160:    token_ptr=(token_stream)malloc(sizeof(struct token_stream_type));
        1:  161:    token_ptr->ch_stream=open_character_stream(FILENAME);/* Get character
        -:  162:                                                             stream  */
        1:  163:    return(token_ptr);
        -:  164:}
        -:  165:
        -:  166:/* ********************************************************************
        -:  167:   Function name : get_token
        -:  168:   Input         : token_stream
        -:  169:   Output        : token
        -:  170:   Exceptions    : none.
        -:  171:   Description   : This function returns the next token from the
        -:  172:                   token_stream.The type of token is integer and specifies 
        -:  173:                   only the type of the token. DFA is used for finding the
        -:  174:                   next token. cu_state is initialized to zero and charcter
        -:  175:                   are read until the the is the final state and it
        -:  176:                   returns the token type.
        -:  177:* ******************************************************************* */
        -:  178:
        2:  179:token get_token(tstream_ptr)
        -:  180:token_stream tstream_ptr;
        -:  181:{
        -:  182:      char token_str[80]; /* This buffer stores the current token */
        -:  183:      int token_ind;      /* Index to the token_str  */
        -:  184:      token token_ptr;
        -:  185:      CHARACTER ch;
        -:  186:      int cu_state,next_st,token_found;
        -:  187:  
        2:  188:      token_ptr=(token)(malloc(sizeof(struct token_type)));
        2:  189:      ch=get_char(tstream_ptr->ch_stream);
        2:  190:      cu_state=token_ind=token_found=0;
        6:  191:      while(!token_found)
        -:  192:      {
        6:  193:	  if(token_ind < 80) /* ADDED ERROR CHECK - hf */
        -:  194:	  {
        6:  195:	      token_str[token_ind++]=ch;
        6:  196:	      next_st=next_state(cu_state,ch);
        -:  197:	  }
        -:  198:	  else
        -:  199:	  {
    #####:  200:	      next_st = -1; /* - hf */
        -:  201:	  }
        6:  202:	  if (next_st == -1) { /* ERROR or EOF case */
        2:  203:	      return(error_or_eof_case(tstream_ptr, 
        -:  204:				       token_ptr,cu_state,token_str,token_ind,ch));
        5:  205:	  } else if (next_st == -2) {/* This is numeric case. */
    #####:  206:	      return(numeric_case(tstream_ptr,token_ptr,ch,
        -:  207:				  token_str,token_ind));
        5:  208:	  } else if (next_st == -3) {/* This is the IDENTIFIER case */
        1:  209:	      token_ptr->token_id=IDENTIFIER;
        1:  210:	      unget_char(ch,tstream_ptr->ch_stream);
        1:  211:	      token_ind--;
        1:  212:	      get_actual_token(token_str,token_ind);
        1:  213:	      strcpy(token_ptr->token_string,token_str);
        1:  214:	      return(token_ptr);
        -:  215:	  } 
        -:  216:	    
        4:  217:	  switch(next_st) 
        -:  218:            { 
        3:  219:                 default : break;
    #####:  220:                 case 6  : /* These are all KEYWORD cases. */
        -:  221:                 case 9  :
        -:  222:                 case 11 :
        -:  223:                 case 13 :
        -:  224:		 case 12 : /* added code */
    #####:  225:                 case 16 : ch=get_char(tstream_ptr->ch_stream);
    #####:  226:                           if(check_delimiter(ch)==TRUE)
        -:  227:                           {
    #####:  228:                                 token_ptr->token_id=keyword(next_st);
    #####:  229:                                 unget_char(ch,tstream_ptr->ch_stream);
    #####:  230:                                 token_ptr->token_string[0]='\0';
    #####:  231:                                 return(token_ptr);
        -:  232:                           }
    #####:  233:                           unget_char(ch,tstream_ptr->ch_stream);
    #####:  234:                           break;
    #####:  235:                 case 19 : /* These are all special SPECIAL character */
        -:  236:                 case 20 : /* cases */
        -:  237:                 case 21 :
        -:  238:                 case 22 :
        -:  239:                 case 23 :
        -:  240:                 case 24 :
        -:  241:                 case 25 :
    #####:  242:                 case 32 : token_ptr->token_id=special(next_st);
    #####:  243:                           token_ptr->token_string[0]='\0';
    #####:  244:                           return(token_ptr);
    #####:  245:                 case 27 : /* These are constant cases */
    #####:  246:                 case 29 : token_ptr->token_id=constant(next_st,token_str,token_ind);
    #####:  247:                           get_actual_token(token_str,token_ind);
    #####:  248:                           strcpy(token_ptr->token_string,token_str);
    #####:  249:                           return(token_ptr);
        1:  250:                 case 30 :  /* This is COMMENT case */
        1:  251:                           skip(tstream_ptr->ch_stream);
        1:  252:                           token_ind=next_st=0;
        1:  253:                           break;
        -:  254:            }
        4:  255:            cu_state=next_st;
        4:  256:            ch=get_char(tstream_ptr->ch_stream);
        -:  257:      }
    #####:  258:}
        -:  259:
        -:  260:/* ******************************************************************
        -:  261:   Function name : numeric_case
        -:  262:   Input         : tstream_ptr,token_ptr,ch,token_str,token_ind
        -:  263:   Output        : token_ptr;
        -:  264:   Exceptions    : none 
        -:  265:   Description   : It checks for the delimiter, if it is then it
        -:  266:                   forms numeric token else forms error token.
        -:  267: * ****************************************************************** */
        -:  268:
    #####:  269:static token numeric_case(tstream_ptr,token_ptr,ch,token_str,token_ind)
        -:  270:token_stream tstream_ptr;
        -:  271:token token_ptr;
        -:  272:char ch,token_str[];
        -:  273:int token_ind;
        -:  274:{
    #####:  275:        if(check_delimiter(ch)!=TRUE)
        -:  276:        {   /* Error case */
    #####:  277:            token_ptr->token_id=ERROR;
    #####:  278:            while(check_delimiter(ch)==FALSE)
        -:  279:	    {
    #####:  280:		if(token_ind >= 80) break; /* Added protection - hf */
    #####:  281:		token_str[token_ind++]=ch=get_char(tstream_ptr->ch_stream);
        -:  282:	    }
    #####:  283:            unget_char(ch,tstream_ptr->ch_stream);
    #####:  284:            token_ind--;
    #####:  285:            get_actual_token(token_str,token_ind);
    #####:  286:            strcpy(token_ptr->token_string,token_str);
    #####:  287:            return(token_ptr);
        -:  288:        }
    #####:  289:        token_ptr->token_id=NUMERIC; /* Numeric case */
    #####:  290:        unget_char(ch,tstream_ptr->ch_stream);
    #####:  291:        token_ind--;
    #####:  292:        get_actual_token(token_str,token_ind);
    #####:  293:        strcpy(token_ptr->token_string,token_str);
    #####:  294:        return(token_ptr);
        -:  295:}
        -:  296:
        -:  297:/* *****************************************************************
        -:  298:   Function name : error_or_eof_case 
        -:  299:   Input         : tstream_ptr,token_ptr,cu_state,token_str,token_ind,ch
        -:  300:   Output        : token_ptr 
        -:  301:   Exceptions    : none 
        -:  302:   Description   : This function checks whether it is EOF or not.
        -:  303:                   If it is it returns EOF token else returns ERROR 
        -:  304:                   token.
        -:  305: * *****************************************************************/
        -:  306:
        1:  307:static token error_or_eof_case(tstream_ptr,token_ptr,cu_state,token_str,token_ind,ch)
        -:  308:token_stream tstream_ptr;
        -:  309:token token_ptr;
        -:  310:int cu_state,token_ind;
        -:  311:char token_str[],ch;
        -:  312:{
        1:  313:      if(is_end_of_character_stream(tstream_ptr->ch_stream)) 
        -:  314:      {
        1:  315:            token_ptr->token_id = EOTSTREAM;
        1:  316:            token_ptr->token_string[0]='\0';
        1:  317:            return(token_ptr);
        -:  318:      }
    #####:  319:      if(cu_state !=0)
        -:  320:      {
    #####:  321:            unget_char(ch,tstream_ptr->ch_stream);
    #####:  322:            token_ind--;
        -:  323:      }
    #####:  324:      token_ptr->token_id=ERROR;
    #####:  325:      get_actual_token(token_str,token_ind);
    #####:  326:      strcpy(token_ptr->token_string,token_str);
    #####:  327:      return(token_ptr);                
        -:  328:}
        -:  329:
        -:  330:/* *********************************************************************
        -:  331:   Function name : check_delimiter
        -:  332:   Input         : character
        -:  333:   Output        : boolean
        -:  334:   Exceptions    : none.
        -:  335:   Description   : This function checks for the delimiter. If ch is not
        -:  336:                   alphabet and non numeric then it returns TRUE else 
        -:  337:                   it returns FALSE. 
        -:  338: * ******************************************************************* */
        -:  339:
    #####:  340:static int check_delimiter(ch)
        -:  341:char ch;
        -:  342:{
    #####:  343:      if(!isalpha(ch) && !isdigit(ch)) /* Check for digit and alpha */
    #####:  344:          return(TRUE);
    #####:  345:      return(FALSE);
        -:  346:}
        -:  347:
        -:  348:/* ********************************************************************
        -:  349:   Function name : keyword
        -:  350:   Input         : state of the DFA
        -:  351:   Output        : Keyword.
        -:  352:   Exceptions    : If the state doesn't represent a keyword it exits.
        -:  353:   Description   : According to the final state specified by state the
        -:  354:                   respective token_id is returned.
        -:  355: * ***************************************************************** */
        -:  356:
    #####:  357:static int keyword(state)
        -:  358:int state;
        -:  359:{
    #####:  360:      switch(state)
        -:  361:      {   /* Return the respective macro for the Keyword. */
    #####:  362:          case 6 : return(LAMBDA);
    #####:  363:          case 9 : return(AND);
    #####:  364:          case 11: return(OR);
    #####:  365:          case 13: return(IF);
    #####:  366:          case 16: return(XOR);
    #####:  367:          default: fprintf(stdout, "error\n");break;
        -:  368:      }
    #####:  369:      exit(0);
        -:  370:}
        -:  371:
        -:  372:/* ********************************************************************
        -:  373:   Function name : special
        -:  374:   Input         : The state of the DFA.
        -:  375:   Output        : special symbol.
        -:  376:   Exceptions    : if the state doesn't belong to a special character
        -:  377:                   it exits.
        -:  378:   Description   : This function returns the token_id according to the
        -:  379:                   final state given by state.
        -:  380: * ****************************************************************** */
        -:  381:
    #####:  382:static int special(state)
        -:  383:int state;
        -:  384:{
    #####:  385:     switch(state)
        -:  386:     {   /* return the respective macro for the special character. */
    #####:  387:         case 19: return(LPAREN);
    #####:  388:         case 20: return(RPAREN);
    #####:  389:         case 21: return(LSQUARE);
    #####:  390:         case 22: return(RSQUARE);
    #####:  391:         case 23: return(QUOTE);
    #####:  392:         case 24: return(BQUOTE);
    #####:  393:         case 25: return(COMMA);
    #####:  394:         case 32: return(EQUALGREATER);
    #####:  395:         default: fprintf(stdout, "error\n");break;
        -:  396:     }
    #####:  397:     exit(0);
        -:  398:}
        -:  399:
        -:  400:/* **********************************************************************
        -:  401:   Function name : skip
        -:  402:   Input         : character_stream
        -:  403:   Output        : void.
        -:  404:   Exceptions    : none.
        -:  405:   Description   : This function skips the comment part of the program.
        -:  406:                   It takes charcter_stream as input and reads character
        -:  407:                   until it finds new line character or
        -:  408:                   end_of_character_stream.                   
        -:  409: * ******************************************************************* */
        -:  410:
        1:  411:static skip(stream_ptr)
        -:  412:character_stream stream_ptr;
        -:  413:{
        -:  414:        char c;
        -:  415:  
       36:  416:        while((c=get_char(stream_ptr))!='\n' && 
       35:  417:               !is_end_of_character_stream(stream_ptr))
        -:  418:             ; /* Skip the characters until EOF or EOL found. */
       1*:  419:	if(c==EOF) unget_char(c, stream_ptr); /* Put back to leave gracefully - hf */
        1:  420:        return;
        -:  421:}
        -:  422:
        -:  423:/* *********************************************************************
        -:  424:   Function name : constant
        -:  425:   Input         : state of DFA, Token string, Token id.
        -:  426:   Output        : constant token.
        -:  427:   Exceptions    : none.
        -:  428:   Description   : This function returns the token_id for the constatnts
        -:  429:                   speccified by  the final state. 
        -:  430: * ****************************************************************** */
        -:  431:
    #####:  432:static int constant(state,token_str,token_ind)
        -:  433:int state,token_ind;
        -:  434:char token_str[];
        -:  435:{
    #####:  436:     switch(state)
        -:  437:     {   /* Return the respective CONSTANT macro. */
    #####:  438:         case 27 : return(STRING_CONSTANT);
    #####:  439:         case 29 : token_str[token_ind-2]=' '; return(CHARACTER_CONSTANT);
    #####:  440:         default : break;
        -:  441:     }
    #####:  442:}
        -:  443:
        -:  444:
        -:  445:/* *******************************************************************
        -:  446:   Function name : next_state
        -:  447:   Input         : current state, character
        -:  448:   Output        : next state of the DFA
        -:  449:   Exceptions    : none.
        -:  450:   Description   : This function returns the next state in the transition
        -:  451:                   diagram. The next state is determined by the current
        -:  452:                   state state and the inpu character ch.
        -:  453: * ****************************************************************** */
        -:  454:              
       14:  455:static int next_state(state,ch)
        -:  456:int state;
        -:  457:char ch;
        -:  458:{
       14:  459:    if(state < 0)
        2:  460:      return(state);
       12:  461:    if(base[state]+ch >= 0)
        -:  462:    {
       10:  463:        if(check[base[state]+ch] == state) /* Check for the right state */
        4:  464:             return(next[base[state]+ch]);
        -:  465:        else
        6:  466:              return(next_state(default1[state],ch));
        -:  467:    }
        -:  468:    else
        2:  469:        return(next_state(default1[state],ch));
        -:  470:}
        -:  471:
        -:  472:/* *********************************************************************
        -:  473:   Function name : is_eof_token
        -:  474:   Input         : token
        -:  475:   Output        : Boolean
        -:  476:   Exceptions    : none.
        -:  477:   Description   : This function checks whether the token t is eof_token 
        -:  478:                   or not. If the integer value stored in the t is
        -:  479:                   EOTSTREAM then it is eof_token.
        -:  480: * ***************************************************************** */
        -:  481:
        2:  482:BOOLEAN is_eof_token(t)
        -:  483:token t;
        -:  484:{
        2:  485:    if(t->token_id==EOTSTREAM)
        1:  486:        return(TRUE);
        1:  487:    return(FALSE);
        -:  488:}
        -:  489:
        -:  490:/* ********************************************************************
        -:  491:   Function name : print_token
        -:  492:   Input         : token
        -:  493:   Output        : Boolean
        -:  494:   Exceptions    : none.
        -:  495:   Description   : This function  prints the token. The token_id gives 
        -:  496:                   the type of token not the token itself. So, in the
        -:  497:                   case of identifier,numeric,  string,character it is
        -:  498:                   required to print the actual token  from token_str. 
        -:  499:                   So, precaution must be taken when printing the token.
        -:  500:                   This function is able to print the current token only
        -:  501:                   and it is the limitation of the program.
        -:  502: * ******************************************************************** */
        -:  503:
        2:  504:BOOLEAN print_token(token_ptr)
        -:  505:token token_ptr;
        -:  506:{
        2:  507:     switch(token_ptr->token_id)
        -:  508:     {    /* Print the respective tokens. */
    #####:  509:          case ERROR : fprintf(stdout, "error,\t\"");fprintf(stdout, "%s",token_ptr->token_string);
    #####:  510:                       fprintf(stdout, "\".\n");return(TRUE);
        1:  511:          case EOTSTREAM : fprintf(stdout, "eof.\n");return(TRUE);
    #####:  512:          case 6 : fprintf(stdout, "keyword,\t\"lambda\".\n");return(TRUE);
    #####:  513:          case 9 : fprintf(stdout, "keyword,\t\"and\".\n");return(TRUE);
    #####:  514:          case 11: fprintf(stdout, "keyword,\t\"or\".\n");return(TRUE);
    #####:  515:          case 13: fprintf(stdout, "keyword,\t\"if\".\n");return(TRUE);
    #####:  516:          case 16: fprintf(stdout, "keyword,\t\"xor\".\n");return(TRUE);
        1:  517:          case 17: fprintf(stdout, "identifier,\t\"");fprintf(stdout, "%s",token_ptr->token_string);
        1:  518:                   fprintf(stdout, "\".\n");return(TRUE);
    #####:  519:          case 18: fprintf(stdout, "numeric,\t");fprintf(stdout, "%s",token_ptr->token_string);
    #####:  520:                   fprintf(stdout, ".\n");return(TRUE);
    #####:  521:          case 19: fprintf(stdout, "lparen.\n");return(TRUE);
    #####:  522:          case 20: fprintf(stdout, "rparen.\n");return(TRUE);
    #####:  523:          case 21: fprintf(stdout, "lsquare.\n");return(TRUE);
    #####:  524:          case 22: fprintf(stdout, "rsquare.\n");return(TRUE);
    #####:  525:          case 23: fprintf(stdout, "quote.\n");return(TRUE);
    #####:  526:          case 24: fprintf(stdout, "bquote.\n");return(TRUE);
    #####:  527:          case 25: fprintf(stdout, "comma.\n");return(TRUE);
    #####:  528:          case 27: fprintf(stdout, "string,\t");fprintf(stdout, "%s",token_ptr->token_string);
    #####:  529:                   fprintf(stdout, ".\n");return(TRUE);
    #####:  530:          case 29: fprintf(stdout, "character,\t\"");fprintf(stdout, "%s",token_ptr->token_string);
    #####:  531:                   fprintf(stdout, "\".\n");return(TRUE);
    #####:  532:          case 32: fprintf(stdout, "keyword,\t\"=>\".\n");return(TRUE);
    #####:  533:          default: break;
        -:  534:      }
    #####:  535:      return(FALSE);
        -:  536:}
        -:  537:
        -:  538:/* **********************************************************************
        -:  539:   Function name : get_actual_token
        -:  540:   Input         : token string and token id.
        -:  541:   Output        : void.
        -:  542:   Exceptions    : none.
        -:  543:   Description   : This function prints the actual token in the case of
        -:  544:                   identifier,numeric,string and character. It removes
        -:  545:                   the leading and trailing  spaces and prints the token.
        -:  546: * ****************************************************************** */
        -:  547:
        1:  548:static get_actual_token(token_str,token_ind)
        -:  549:int token_ind;
        -:  550:char token_str[];
        -:  551:{
        -:  552:          int ind,start;
        -:  553:
       1*:  554:          for(ind=token_ind;ind>0 && isspace(token_str[ind-1]);--ind); 
        -:  555:                        /* Delete the trailing white spaces & protect - hf */
        1:  556:           token_str[ind]='\0';token_ind=ind;
        2:  557:          for(ind=0;ind<token_ind;++ind)
        2:  558:                if(!isspace(token_str[ind]))
        1:  559:                      break;
        4:  560:          for(start=0;ind<=token_ind;++start,++ind) /* Delete the leading
        -:  561:                                                       white spaces. */
        3:  562:                token_str[start]=token_str[ind];
        1:  563:          return;
        -:  564:}
