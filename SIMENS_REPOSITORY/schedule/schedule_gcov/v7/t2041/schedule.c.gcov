        -:    0:Source:schedule.c
        -:    0:Graph:schedule.gcno
        -:    0:Data:schedule.gcda
        -:    0:Runs:1
        -:    1:/*  -*- Last-Edit:  Wed May 7 10:12:52 1993 by Monica; -*- */
        -:    2:
        -:    3:
        -:    4:#include <stdio.h>
        -:    5:
        -:    6:/* A job descriptor. */
        -:    7:
        -:    8:#define NULL 0
        -:    9:
        -:   10:
        -:   11:#define NEW_JOB        1
        -:   12:#define UPGRADE_PRIO   2 
        -:   13:#define BLOCK          3
        -:   14:#define UNBLOCK        4  
        -:   15:#define QUANTUM_EXPIRE 5
        -:   16:#define FINISH         6
        -:   17:#define FLUSH          7
        -:   18:
        -:   19:#define MAXPRIO 3
        -:   20:
        -:   21:typedef struct _job {
        -:   22:    struct  _job *next, *prev; /* Next and Previous in job list. */
        -:   23:    int          val  ;         /* Id-value of program. */
        -:   24:    short        priority;     /* Its priority. */
        -:   25:} Ele, *Ele_Ptr;
        -:   26:
        -:   27:typedef struct list		/* doubly linked list */
        -:   28:{
        -:   29:  Ele *first;
        -:   30:  Ele *last;
        -:   31:  int    mem_count;		/* member count */
        -:   32:} List;
        -:   33:
        -:   34:/*-----------------------------------------------------------------------------
        -:   35:  new_ele
        -:   36:     alloates a new element with value as num.
        -:   37:-----------------------------------------------------------------------------*/
       17:   38:Ele* new_ele(new_num) 
        -:   39:int new_num;
        -:   40:{	
        -:   41:    Ele *ele;
        -:   42:
       17:   43:    ele =(Ele *)malloc(sizeof(Ele));
       17:   44:    ele->next = NULL;
       17:   45:    ele->prev = NULL;
       17:   46:    ele->val  = new_num;
       17:   47:    return ele;
        -:   48:}
        -:   49:
        -:   50:/*-----------------------------------------------------------------------------
        -:   51:  new_list
        -:   52:        allocates, initializes and returns a new list.
        -:   53:        Note that if the argument compare() is provided, this list can be
        -:   54:            made into an ordered list. see insert_ele().
        -:   55:-----------------------------------------------------------------------------*/
        4:   56:List *new_list()
        -:   57:{
        -:   58:    List *list;
        -:   59:
        4:   60:    list = (List *)malloc(sizeof(List));
        -:   61:    
        4:   62:    list->first = NULL;
        4:   63:    list->last  = NULL;
        4:   64:    list->mem_count = 0;
        4:   65:    return (list);
        -:   66:}
        -:   67:
        -:   68:/*-----------------------------------------------------------------------------
        -:   69:  append_ele
        -:   70:        appends the new_ele to the list. If list is null, a new
        -:   71:	list is created. The modified list is returned.
        -:   72:-----------------------------------------------------------------------------*/
       33:   73:List *append_ele(a_list, a_ele)
        -:   74:List *a_list;
        -:   75:Ele  *a_ele;
        -:   76:{
       33:   77:  if (!a_list)
        1:   78:      a_list = new_list();	/* make list without compare function */
        -:   79:
       33:   80:  a_ele->prev = a_list->last;	/* insert at the tail */
       33:   81:  if (a_list->last)
       10:   82:    a_list->last->next = a_ele;
        -:   83:  else
       23:   84:    a_list->first = a_ele;
       33:   85:  a_list->last = a_ele;
       33:   86:  a_ele->next = NULL;
       33:   87:  a_list->mem_count++;
       33:   88:  return (a_list);
        -:   89:}
        -:   90:
        -:   91:/*-----------------------------------------------------------------------------
        -:   92:  find_nth
        -:   93:        fetches the nth element of the list (count starts at 1)
        -:   94:-----------------------------------------------------------------------------*/
       16:   95:Ele *find_nth(f_list, n)
        -:   96:List *f_list;
        -:   97:int   n;
        -:   98:{
        -:   99:    Ele *f_ele;
        -:  100:    int i;
        -:  101:
       16:  102:    if (!f_list)
    #####:  103:	return NULL;
       16:  104:    f_ele = f_list->first;
       17:  105:    for (i=1; f_ele && (i<n); i++)
        1:  106:	f_ele = f_ele->next;
       16:  107:    return f_ele;
        -:  108:}
        -:  109:
        -:  110:/*-----------------------------------------------------------------------------
        -:  111:  del_ele
        -:  112:        deletes the old_ele from the list.
        -:  113:        Note: even if list becomes empty after deletion, the list
        -:  114:	      node is not deallocated.
        -:  115:-----------------------------------------------------------------------------*/
       33:  116:List *del_ele(d_list, d_ele)
        -:  117:List *d_list;
        -:  118:Ele  *d_ele;
        -:  119:{
       33:  120:    if (!d_list || !d_ele)
    #####:  121:	return (NULL);
        -:  122:    
       33:  123:    if (d_ele->next)
        9:  124:	d_ele->next->prev = d_ele->prev;
        -:  125:    else
       24:  126:	d_list->last = d_ele->prev;
       33:  127:    if (d_ele->prev)
        1:  128:	d_ele->prev->next = d_ele->next;
        -:  129:    else
       32:  130:	d_list->first = d_ele->next;
        -:  131:    /* KEEP d_ele's data & pointers intact!! */
       33:  132:    d_list->mem_count--;
       33:  133:    return (d_list);
        -:  134:}
        -:  135:
        -:  136:/*-----------------------------------------------------------------------------
        -:  137:   free_ele
        -:  138:       deallocate the ptr. Caution: The ptr should point to an object
        -:  139:       allocated in a single call to malloc.
        -:  140:-----------------------------------------------------------------------------*/
       17:  141:void free_ele(ptr)
        -:  142:Ele *ptr;
        -:  143:{
       17:  144:    free(ptr);
       17:  145:}
        -:  146:
        -:  147:int alloc_proc_num;
        -:  148:int num_processes;
        -:  149:Ele* cur_proc;
        -:  150:List *prio_queue[MAXPRIO+1]; 	/* 0th element unused */
        -:  151:List *block_queue;
        -:  152:
        -:  153:void
       27:  154:finish_process()
        -:  155:{
       27:  156:    schedule();
       27:  157:    if (cur_proc)
        -:  158:    {
       17:  159:	fprintf(stdout, "%d ", cur_proc->val);
       17:  160:	free_ele(cur_proc);
       17:  161:	num_processes--;
        -:  162:    }
       27:  163:}
        -:  164:
        -:  165:void
       11:  166:finish_all_processes()
        -:  167:{
        -:  168:    int i;
        -:  169:    int total;
       11:  170:    total = num_processes;
       29:  171:    for (i=0; i<total; i++)
       18:  172:	finish_process();
       11:  173:}
        -:  174:
       41:  175:schedule()
        -:  176:{
        -:  177:    int i;
        -:  178:    
       41:  179:    cur_proc = NULL;
      102:  180:    for (i=MAXPRIO; i > 0; i--)
        -:  181:    {
       88:  182:	if (prio_queue[i]->mem_count > 0)
        -:  183:	{
       27:  184:	    cur_proc = prio_queue[i]->first;
       27:  185:	    prio_queue[i] = del_ele(prio_queue[i], cur_proc);
       27:  186:	    return;
        -:  187:	}
        -:  188:    }
        -:  189:}
        -:  190:
        -:  191:void
        6:  192:upgrade_process_prio(prio, ratio)
        -:  193:int prio;
        -:  194:float ratio;
        -:  195:{
        -:  196:    int count;
        -:  197:    int n;
        -:  198:    Ele *proc;
        -:  199:    List *src_queue, *dest_queue;
        -:  200:    
        6:  201:    if (prio >= MAXPRIO)
    #####:  202:	return;
        6:  203:    src_queue = prio_queue[prio];
        6:  204:    dest_queue = prio_queue[prio+1];
        6:  205:    count = src_queue->mem_count;
        -:  206:
        6:  207:    if (count > 0)
        -:  208:    {
        2:  209:	n = (int) (count*ratio + 1);
       2*:  210:	if(ratio == 1.0) n--; /* Correct original */
        2:  211:	proc = find_nth(src_queue, n);
        2:  212:	if (proc) {
        2:  213:	    src_queue = del_ele(src_queue, proc);
        -:  214:	    /* append to appropriate prio queue */
        2:  215:	    proc->priority = prio;
        2:  216:	    dest_queue = append_ele(dest_queue, proc);
        -:  217:	}
        -:  218:    }
        -:  219:}
        -:  220:
        -:  221:void
       14:  222:unblock_process(ratio)
        -:  223:float ratio;
        -:  224:{
        -:  225:    int count;
        -:  226:    int n;
        -:  227:    Ele *proc;
        -:  228:    int prio;
       14:  229:    if (block_queue)
        -:  230:    {
       14:  231:	count = block_queue->mem_count;
       14:  232:	n = (int) (count*ratio + 1);
      14*:  233:	if(ratio == 1.0) n--; /* Correct original */
       14:  234:	proc = find_nth(block_queue, n);
       14:  235:	if (proc) {
        4:  236:	    block_queue = del_ele(block_queue, proc);
        -:  237:	    /* append to appropriate prio queue */
        4:  238:	    prio = proc->priority;
        4:  239:	    prio_queue[prio] = append_ele(prio_queue[prio], proc);
        -:  240:	}
        -:  241:    }
       14:  242:}
        -:  243:
        8:  244:void quantum_expire()
        -:  245:{
        -:  246:    int prio;
        8:  247:    schedule();
        8:  248:    if (cur_proc)
        -:  249:    {
        6:  250:	prio = cur_proc->priority;
        6:  251:	prio_queue[prio] = append_ele(prio_queue[prio], cur_proc);
        -:  252:    }	
        8:  253:}
        -:  254:	
        -:  255:void
        6:  256:block_process()
        -:  257:{
        6:  258:    schedule();
        6:  259:    if (cur_proc)
        -:  260:    {
        4:  261:	block_queue = append_ele(block_queue, cur_proc);
        -:  262:    }
        6:  263:}
        -:  264:
       17:  265:Ele * new_process(prio)
        -:  266:int prio;
        -:  267:{
        -:  268:    Ele *proc;
       17:  269:    proc = new_ele(alloc_proc_num++);
       17:  270:    proc->priority = prio;
       17:  271:    num_processes++;
       17:  272:    return proc;
        -:  273:}
        -:  274:
       11:  275:void add_process(prio)
        -:  276:int prio;
        -:  277:{
        -:  278:    Ele *proc;
       11:  279:    proc = new_process(prio);
       11:  280:    prio_queue[prio] = append_ele(prio_queue[prio], proc);
       11:  281:}
        -:  282:
        3:  283:void init_prio_queue(prio, num_proc)
        -:  284:int prio;
        -:  285:int num_proc;
        -:  286:{
        -:  287:    List *queue;
        -:  288:    Ele  *proc;
        -:  289:    int i;
        -:  290:    
        3:  291:    queue = new_list();
        9:  292:    for (i=0; i<num_proc; i++)
        -:  293:    {
        6:  294:	proc = new_process(prio);
        6:  295:	queue = append_ele(queue, proc);
        -:  296:    }
        3:  297:    prio_queue[prio] = queue;
        3:  298:}
        -:  299:
        1:  300:void initialize()
        -:  301:{
        1:  302:    alloc_proc_num = 0;
        1:  303:    num_processes = 0;
        1:  304:}
        -:  305:				
        -:  306:/* test driver */
        1:  307:main(argc, argv)
        -:  308:int argc;
        -:  309:char *argv[];
        -:  310:{
        -:  311:    int command;
        -:  312:    int prio;
        -:  313:    float ratio;
        -:  314:    int status;
        -:  315:
        1:  316:    if (argc < (MAXPRIO+1))
        -:  317:    {
    #####:  318:	fprintf(stdout, "incorrect usage\n");
    #####:  319:	return;
        -:  320:    }
        -:  321:    
        1:  322:    initialize();
        4:  323:    for (prio=MAXPRIO; prio >= 1; prio--)
        -:  324:    {
        3:  325:	init_prio_queue(prio, atoi(argv[prio]));
        -:  326:    }
        1:  327:    for (status = fscanf(stdin, "%d", &command);
       66:  328:	 ((status!=EOF) && status);
       65:  329:	 status = fscanf(stdin, "%d", &command))
        -:  330:    {
       65:  331:	switch(command)
        -:  332:	{
        9:  333:	case FINISH:
        9:  334:	    finish_process();
        9:  335:	    break;
        6:  336:	case BLOCK:
        6:  337:	    block_process();
        6:  338:	    break;
        8:  339:	case QUANTUM_EXPIRE:
        8:  340:	    quantum_expire();
        8:  341:	    break;
       14:  342:	case UNBLOCK:
       14:  343:	    fscanf(stdin, "%f", &ratio);
       14:  344:	    unblock_process(ratio);
       14:  345:	    break;
        6:  346:	case UPGRADE_PRIO:
        6:  347:	    fscanf(stdin, "%d", &prio);
        6:  348:	    fscanf(stdin, "%f", &ratio);
        6:  349:	    if (prio > MAXPRIO || prio <= 0) { 
    #####:  350:		fprintf(stdout, "** invalid priority\n");
    #####:  351:		return;
        -:  352:	    }
        -:  353:	    else 
        6:  354:		upgrade_process_prio(prio, ratio);
        6:  355:	    break;
       11:  356:	case NEW_JOB:
       11:  357:	    fscanf(stdin, "%d", &prio);
       11:  358:	    if (prio > MAXPRIO || prio <= 0) {
    #####:  359:		fprintf(stdout, "** invalid priority\n");
    #####:  360:		return;
        -:  361:	    }
        -:  362:	    else 
       11:  363:		add_process(prio);
       11:  364:	    break;
       11:  365:	case FLUSH:
       11:  366:	    finish_all_processes();
       11:  367:	    break;
        -:  368:	}
        -:  369:    }
        -:  370:}
        -:  371:
        -:  372:/* A simple input spec:
        -:  373:  
        -:  374:  a.out n3 n2 n1
        -:  375:
        -:  376:  where n3, n2, n1 are non-negative integers indicating the number of
        -:  377:  initial processes at priority 3, 2, and 1, respectively.
        -:  378:
        -:  379:  The input file is a list of commands of the following kinds:
        -:  380:   (For simplicity, comamnd names are integers (NOT strings)
        -:  381:    
        -:  382:  FINISH            ;; this exits the current process (printing its number)
        -:  383:  NEW_JOB priority  ;; this adds a new process at specified priority
        -:  384:  BLOCK             ;; this adds the current process to the blocked queue
        -:  385:  QUANTUM_EXPIRE    ;; this puts the current process at the end
        -:  386:                    ;;      of its prioqueue
        -:  387:  UNBLOCK ratio     ;; this unblocks a process from the blocked queue
        -:  388:                    ;;     and ratio is used to determine which one
        -:  389:
        -:  390:  UPGRADE_PRIO small-priority ratio ;; this promotes a process from
        -:  391:                    ;; the small-priority queue to the next higher priority
        -:  392:                    ;;     and ratio is used to determine which process
        -:  393: 
        -:  394:  FLUSH	            ;; causes all the processes from the prio queues to
        -:  395:                    ;;    exit the system in their priority order
        -:  396:
        -:  397:where
        -:  398: NEW_JOB        1
        -:  399: UPGRADE_PRIO   2 
        -:  400: BLOCK          3
        -:  401: UNBLOCK        4  
        -:  402: QUANTUM_EXPIRE 5
        -:  403: FINISH         6
        -:  404: FLUSH          7
        -:  405:and priority is in        1..3
        -:  406:and small-priority is in  1..2
        -:  407:and ratio is in           0.0..1.0
        -:  408:
        -:  409: The output is a list of numbers indicating the order in which
        -:  410: processes exit from the system.   
        -:  411:
        -:  412:*/
        -:  413:
        -:  414:
