        -:    0:Source:NTS_Repo/quicksort/quicksort_mutants/v3/quicksort.c
        -:    0:Graph:NTS_Repo/quicksort/quicksort_mutants/v3/quicksort.gcno
        -:    0:Data:NTS_Repo/quicksort/quicksort_mutants/v3/quicksort.gcda
        -:    0:Runs:0
        -:    1://This program is taken from website: https://www.tutorialspoint.com/data_structures_algorithms/quick_sort_program_in_c.htm
        -:    2:
        -:    3:#include <stdio.h>
        -:    4:#include <stdbool.h>
        -:    5:#include <stdlib.h> 
        -:    6:
        -:    7:
        -:    8:#define MAX 8
        -:    9:
        -:   10:int intArray[MAX];
        -:   11:
    #####:   12:void getdata(int* argv[]){
    #####:   13:    intArray[0]=atoi(argv[1]);
    #####:   14:    intArray[1]=atoi(argv[2]);
    #####:   15:    intArray[2]=atoi(argv[3]);
    #####:   16:    intArray[3]=atoi(argv[4]);
    #####:   17:    intArray[4]=atoi(argv[5]);
    #####:   18:    intArray[5]=atoi(argv[6]);
    #####:   19:    intArray[6]=atoi(argv[7]);
    #####:   20:    intArray[7]=atoi(argv[8]);
    #####:   21:}
        -:   22:
    #####:   23:void printline(int count) {
        -:   24:   int i;
        -:   25:	
    #####:   26:   for(i = 0;i < count-1;i++) {
    #####:   27:      printf("=");
        -:   28:   }
        -:   29:	
    #####:   30:   printf("=\n");
    #####:   31:}
        -:   32:
    #####:   33:void display() {
        -:   34:   int i;
    #####:   35:   printf("[");
        -:   36:	
        -:   37:   // navigate through all items 
    #####:   38:   for(i = 0;i < MAX;i++) {
    #####:   39:      printf("%d ",intArray[i]);
        -:   40:   }
        -:   41:	
    #####:   42:   printf("]\n");
    #####:   43:}
        -:   44:
    #####:   45:void swap(int num1, int num2) {
    #####:   46:   int temp = intArray[num1];
    #####:   47:   intArray[num1] = intArray[num2];
    #####:   48:   intArray[num2] = temp;
    #####:   49:}
        -:   50:
    #####:   51:int partition(int left, int right, int pivot) {
    #####:   52:   int leftPointer = left -1;
    #####:   53:   int rightPointer = right;
        -:   54:
        -:   55:   while(true) {
    #####:   56:      while(intArray[++leftPointer] < pivot) {
    #####:   57:        printf("Do nothing\n");
        -:   58:      }
        -:   59:		
    #####:   60:      while(rightPointer > 0 && intArray[--rightPointer] > pivot) {
    #####:   61:        printf("Do nothing\n");
        -:   62:      }
        -:   63:
    #####:   64:      if(leftPointer > rightPointer) {
    #####:   65:         break;
        -:   66:      } else {
    #####:   67:         printf(" item swapped :%d,%d\n", intArray[leftPointer],intArray[rightPointer]);
    #####:   68:         swap(leftPointer,rightPointer);
        -:   69:      }
        -:   70:   }
        -:   71:	
    #####:   72:   printf(" pivot swapped :%d,%d\n", intArray[leftPointer],intArray[right]);
    #####:   73:   swap(leftPointer,right);
    #####:   74:   printf("Updated Array: "); 
    #####:   75:   display();
    #####:   76:   return leftPointer;
        -:   77:}
        -:   78:
    #####:   79:void quickSort(int left, int right) {
    #####:   80:   if(right-left <= 0) {
    #####:   81:      return;   
        -:   82:   } else {
    #####:   83:      int pivot = intArray[right];
    #####:   84:      int partitionPoint = partition(left, right, pivot);
    #####:   85:      quickSort(left,partitionPoint-1);
    #####:   86:      quickSort(partitionPoint+1,right);
        -:   87:   }        
        -:   88:}
        -:   89:
    #####:   90:int main(int argc, int* argv[]) {
    #####:   91:    getdata(argv);
    #####:   92:   printf("Input Array: ");
    #####:   93:   display();
    #####:   94:   printline(50);
    #####:   95:   quickSort(0,MAX-1);
    #####:   96:   printf("Output Array: ");
    #####:   97:   display();
    #####:   98:   printline(50);
        -:   99:}
